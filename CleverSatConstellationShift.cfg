CONTRACT_TYPE
{
	name = CleverSatConstellationShift
	title = Move a Satellite Constellation
	group = CleverSat
	description = Slightly embarrassing, but apparently we launched the @/firstTarget constellation into the wrong orbit. So you are going to have to move it.
	targetBody = @/targetBody1
	synopsis = Move the @/firstTarget constellation into the correct orbit
	completedMessage = Well, that should hold them for a while. Until they ask us to move them again of course.
	targetBody = @/targetBody1
	rewardFunds = Random(10000,20000)
	rewardReputation = Random(1.0, 2.0)
	maxSimultaneous = 1
	
	DATA
	{
	type = List<VesselIdentifier>
	validTarget = $ConstellationList.Add(Target).Where(g => Vessel(g).IsOrbiting())
	conTargets = $SatList.Add(Target).Where(t => Vessel(t).IsOrbiting() && Vessel(t).OrbitApoapsis() > @/targetApMin && Vessel(t).OrbitApoapsis() < @/targetApMax && Vessel(t).OrbitPeriapsis() > @/targetPeMin && Vessel(t).OrbitPeriapsis() < @/targetPeMax && Vessel(t).OrbitInclination() > @/targetInMin && Vessel(t).OrbitInclination() < @/targetInMax && Vessel(t).CelestialBody() == @/targetBody1)
	}
	
	DATA
	{
	type = Vessel
	uniquenessCheck = GROUP_ACTIVE
	firstTarget = @validTarget.Random()
	}
	
	//define how close they have to be to be in a Constellation.
	DATA
	{
	type = double
	targetApMin = @firstTarget.OrbitApoapsis() - 1000000
	targetApMax = @firstTarget.OrbitApoapsis() + 1000000
	targetPeMin = @firstTarget.OrbitPeriapsis() - 1000000
	targetPeMax = @firstTarget.OrbitPeriapsis() + 1000000
	targetInMin = @firstTarget.OrbitInclination() - 10
	targetInMax = @firstTarget.OrbitInclination() + 10
	}
	
	DATA
	{
	type = CelestialBody
	targetBody1 = @/firstTarget.CelestialBody()
	}
	
	BEHAVIOUR
	{
    name = OrbitGenerator
    type = OrbitGenerator

		RANDOM_ORBIT
		{
			type = RANDOM
			inclinationFactor = @/targetBody1 == Sun ? 0 : 0.8
		}
	}
PARAMETER
{
	type = VesselParameterGroup

	ITERATOR
	{
	type = VesselIdentifier
	vessel = @/conTargets
	}

	PARAMETER
	{
		name = ReachSpecificOrbit
		type = ReachSpecificOrbit
		index = 0
		deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0
	}
}

REQUIREMENT
{
name = SatCount
type = Expression
expression = @/conTargets.Count()>2
}
}
