CONTRACT_TYPE
{
	name = CleverSatConstellation
	title = Work on a Satellite Constellation
	group = CleverSat
	description = Poor @/targetSat is looking lonely. We'd like you to move it into sync with @/groupSat - maybe they will be friends?
	targetBody = @/targetBody1
	synopsis = Move @/targetSat into the specified orbit.
	completedMessage = Well, that should hold them for a while. Until they ask us to move the thing again of course.
	targetBody = @/targetBody1
	rewardFunds = Random(40000,60000)
	rewardReputation = Random(2.0, 5.0)
	
	DATA
	{
	type = Vessel
	groupSat = $SatList.Where(g => g.IsOrbiting()).Random()
	}
	
	//define the maximum deviation we'd be willing to accept when forming a constellation.
	DATA
	{
	type = double
	targetApMin = @groupSat.OrbitApoapsis() - 100000
	targetApMax = @groupSat.OrbitApoapsis() + 100000
	targetPeMin = @groupSat.OrbitPeriapsis() - 100000
	targetPeMax = @groupSat.OrbitPeriapsis() + 100000
	targetInMin = @groupSat.OrbitInclination() - 30
	targetInMax = @groupSat.OrbitInclination() + 30
	}
	
	//find a vessel that is within the parameters specified above.
	DATA
	{
	type = Vessel
	targetSat = $SatList.Where(t => t.IsOrbiting() && t.OrbitApoapsis() > @/targetApMin && t.OrbitApoapsis() < @/targetApMax && t.OrbitPeriapsis() > @/targetPeMin && t.OrbitPeriapsis < @/targetPeMax && t.OrbitInclination() > @/targetInMin && t.OrbitInclination < @/targetInMax).Random()
	}
	
	DATA
	{
	type = CelestialBody
	targetBody1 = @/targetSat.CelestialBody()
	}

PARAMETER
{
    name = VesselParameterGroup
    type = VesselParameterGroup
	defineList = ConstellationList
PARAMETER
{
    name = Orbit
    type = Orbit
	minApA = @/groupSat.OrbitApoapsis()-1000
	maxApa = @/groupSat.OrbitApoapsis()+1000
	minPeA = @/groupSat.OrbitPeriapsis()-1000
	maxPeA = @/groupSat.OrbitPeriapsis()+1000
	minInclination = @/groupSat.OrbitInclination()-10
	maxInclination = @/groupSat.OrbitInclination()+10
}
}
REQUIREMENT
{
name = GroupCheck
type = expression
Expression = !$ConstellationList.Contains(@/targetVessel1)
}
}
